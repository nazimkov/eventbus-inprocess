# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
 branches:
      include:
      - master
      - refs/tags/*
pr:
- master

pool:
  vmImage: 'Ubuntu 16.04'

variables:
  solution: './EventBus.InProcess.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  testProjects: '**/tests/**/*.csproj'
  projectName: 'EventBus.InProcess'
  project: './src/EventBus.InProcess/EventBus.InProcess.csproj'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1

steps:
- task: DotNetCoreInstaller@0
  displayName: 'Use .NET Core sdk'
  inputs:
    version: 2.2.300

- task: DotNetCoreCLI@2
  displayName: 'Build solution'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Unit testing'
  inputs:
    command: 'test'
    projects: '$(testProjects)'
    arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura'
    nobuild: true

- script: |
    dotnet tool install -g dotnet-reportgenerator-globaltool
    reportgenerator -reports:$(Build.SourcesDirectory)/tests/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines\;Cobertura
  displayName: Create coverage report
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishCodeCoverageResults@1
  displayName: 'Publish coverage'
  inputs:
    summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
    reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
    codeCoverageTool: Cobertura
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: DotNetCoreCLI@2
  displayName: 'Pack'
  inputs:
    command: 'pack'
    projects: '$(project)'
    arguments: '--configuration $(buildConfiguration) -o $(build.artifactStagingDirectory)'
    nobuild: true
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: CopyFiles@2
  displayName: 'Copy Files'
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**/*.nupkg'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/Package'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/Package'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

